openapi: 3.0.0
info:
  title: Combined API Documentation
  version: 1.0.0
servers:
  - url: http://localhost:3000
security:
  - bearerAuth: []
paths:
  /api/account/general/create877:
    post:
      tags:
        - AccountGeneral
      summary: Account - General - Create
      description: |-
        This endpoint is labeled "Account - General - Create". It is a POST request, which typically is used for submitting data to be processed to a specified resource.

        The URL for the request is http://localhost:3000/api/account/general/create877?locale=en-US987678. Notice there is a query string present at the end of URL. This contains the key "locale" with a value of "en-US", which suggests we're specifying US English as our preferred language for the response from the server.

        In the headers, there is a single entry which is empty and disabled by default. Headers can often be used for sending additional information to the server such as client type, timestamps, action type information, etc.

        The body of the request contains a JSON object with the following fields: "email", "phone", "accountType", "password", and "zipcode". Normally these fields are required when creating an account. It's important to note that the actual data (i.e. the actual email, phone, account type, password, and zipcode) must be replaced with valid information when making the POST request.

        Finally, there is also an "auth" field indicating that authentication is required for this endpoint. The type of authentication is a bearer token. The token value labeled as "BearerToken" should be replaced with the actual token string before making the request.

        In conclusion, this endpoint is for creating a new account with specific account information. It requires authentication via a bearer token. The preferred locale is also specified in the query string. This is important information developers need to successfully interact with this endpoint.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"email\":\"email\",\"phone\":\"phone\",\"accountType\":\"User\",\"password\":\"password\",\"zipcode\":\"95126\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: locale
          in: query
          schema:
            type: string
          example: en-US
      responses:
        '200':
          description: OK
          headers:
            X-Powered-By:
              schema:
                type: string
                example: Express
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '518'
            ETag:
              schema:
                type: string
                example: W/"206-b3OQDEnGC+KJmh5o+pCyAkiEpDg"
            Date:
              schema:
                type: string
                example: Fri, 17 Jan 2025 13:11:36 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                message: Login successful
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiYjI3MjI4MDEtNjA5NS00YWRkLThlODMtZWQ2NDNjOTBhNGQzIiwicGhvbmVubyI6IisxMzEyMzQ3NTMxMyIsImlhdCI6MTczNzExOTQ5NiwiZXhwIjoxNzM3MjA1ODk2fQ.uc5t6lY3o8049Vr8nD8-FYDqo0djG8rXsa5iIoeRZE4
                user:
                  _id: b2722801-6095-4add-8e83-ed643c90a4d3
                  phoneno: '+13123475313'
                  firstname: test
                  lastname: user
                  email: testingemai755125@gmail.com
                  zipcode: '12345'
                  dob: '1998-12-31T19:00:00.000Z'
                  lang: en
                accessCode: true
        '401':
          description: Unauthorized
          headers:
            X-Powered-By:
              schema:
                type: string
                example: Express
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '49'
            ETag:
              schema:
                type: string
                example: W/"31-VmptvJVCxgMiCaKMQdd9IkNBIdc"
            Date:
              schema:
                type: string
                example: Fri, 17 Jan 2025 13:15:21 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                success: false
                message: Invalid credentials
  /api/account/general/createnow:
    post:
      tags:
        - AccountGeneral
      summary: Account - General - Create
      description: |-
        This endpoint is titled "Account - General - Create". It's used to create a general account on the server. The actions performed by this endpoint are executed through a POST request.

        The base URL for the request is "http://localhost:3000/api/account/general/createnow?locale=en-US98767". This specifies that the request will be sent to your localhost on port 3000, starting with the API endpoint at '/api/account/general/createnow'. The 'locale' is added as a query parameter at the end of the URL with the value of 'en-US'.

        Inside the 'headers' array, there's an object with empty 'key' and 'value'. The 'type' is set to 'default', and it is 'disabled', which implies that this header does not hold any significant data, and is not required in the request.

        The 'body' of the request is a JSON object containing five strings: 'email', 'phone', 'accountType', 'password', and 'zipcode'. These are key-value pairs required for the creation of a new account.

        - 'email': The email address of the user.
        - 'phone': The phone number of the user.
        - 'accountType': The type of the account to be created for the user. In this case, it is 'User'.
        - 'password': The password string for the new account. 
        - 'zipcode': The zip code of the user's location.

        The 'query' array contains objects that hold query parameters. Here, there is one query parameter 'locale' set to 'en-US', which could potentially affect the language or regional settings of the created account.

        The 'auth' field is used for authentication purposes. It uses bearer token authentication which is indicated by the 'type' being set to 'bearer'. The 'bearer' array contains a 'key' value pair, where the 'key' is 'token', and the 'value' is 'BearerToken'. This is used for validating the client making the request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"email\":\"email\",\"phone\":\"phone\",\"accountType\":\"User\",\"password\":\"password\",\"zipcode\":\"95126\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: locale
          in: query
          schema:
            type: string
          example: en-US
      responses:
        '200':
          description: OK
          headers:
            X-Powered-By:
              schema:
                type: string
                example: Express
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '518'
            ETag:
              schema:
                type: string
                example: W/"206-b3OQDEnGC+KJmh5o+pCyAkiEpDg"
            Date:
              schema:
                type: string
                example: Fri, 17 Jan 2025 13:11:36 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                message: Login successful
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiYjI3MjI4MDEtNjA5NS00YWRkLThlODMtZWQ2NDNjOTBhNGQzIiwicGhvbmVubyI6IisxMzEyMzQ3NTMxMyIsImlhdCI6MTczNzExOTQ5NiwiZXhwIjoxNzM3MjA1ODk2fQ.uc5t6lY3o8049Vr8nD8-FYDqo0djG8rXsa5iIoeRZE4
                user:
                  _id: b2722801-6095-4add-8e83-ed643c90a4d3
                  phoneno: '+13123475313'
                  firstname: test
                  lastname: user
                  email: testingemai755125@gmail.com
                  zipcode: '12345'
                  dob: '1998-12-31T19:00:00.000Z'
                  lang: en
                accessCode: true
        '401':
          description: Unauthorized
          headers:
            X-Powered-By:
              schema:
                type: string
                example: Express
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '49'
            ETag:
              schema:
                type: string
                example: W/"31-VmptvJVCxgMiCaKMQdd9IkNBIdc"
            Date:
              schema:
                type: string
                example: Fri, 17 Jan 2025 13:15:21 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                success: false
                message: Invalid credentials
  /api/account/general/createhere:
    post:
      tags:
        - AccountGeneral
      summary: Account - General - Create
      description: |-
        This endpoint is named "Account - General - Create". This name suggests it is used to create a general account.

        The request method type is POST. This type of request is typically used to send data to be processed to a specified resource.

        The URL of the request is "http://localhost:3000/api/account/general/createhere?locale=en-US9876". This URL includes a query parameter "locale" with a value of "en-US", this indicates that the user interface language is set to English-US.

        The request headers are set as default and currently disabled. This means no additional, specific header information is being sent with the request.

        The body of the request contains the details for the new account in a JSON format. It includes properties for an email address ("email"), a phone number ("phone"), an account type ("User"), a password ("password"), and a zip code ("95126"). All these fields describe the user-related information required to create a new general account.

        The authentication method is of the type "bearer". This means that the requesting client must provide a bearer token named "token" with the value of "BearerToken". Bearer tokens are a type of access token that allows the client to access resources from a server. 

        In summary, this 'POST' endpoint is used to create a new general account with specific user details and uses a bearer token for its authorization.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"email\":\"email\",\"phone\":\"phone\",\"accountType\":\"User\",\"password\":\"password\",\"zipcode\":\"95126\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: locale
          in: query
          schema:
            type: string
          example: en-US
      responses:
        '200':
          description: OK
          headers:
            X-Powered-By:
              schema:
                type: string
                example: Express
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '518'
            ETag:
              schema:
                type: string
                example: W/"206-b3OQDEnGC+KJmh5o+pCyAkiEpDg"
            Date:
              schema:
                type: string
                example: Fri, 17 Jan 2025 13:11:36 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                message: Login successful
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiYjI3MjI4MDEtNjA5NS00YWRkLThlODMtZWQ2NDNjOTBhNGQzIiwicGhvbmVubyI6IisxMzEyMzQ3NTMxMyIsImlhdCI6MTczNzExOTQ5NiwiZXhwIjoxNzM3MjA1ODk2fQ.uc5t6lY3o8049Vr8nD8-FYDqo0djG8rXsa5iIoeRZE4
                user:
                  _id: b2722801-6095-4add-8e83-ed643c90a4d3
                  phoneno: '+13123475313'
                  firstname: test
                  lastname: user
                  email: testingemai755125@gmail.com
                  zipcode: '12345'
                  dob: '1998-12-31T19:00:00.000Z'
                  lang: en
                accessCode: true
        '401':
          description: Unauthorized
          headers:
            X-Powered-By:
              schema:
                type: string
                example: Express
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '49'
            ETag:
              schema:
                type: string
                example: W/"31-VmptvJVCxgMiCaKMQdd9IkNBIdc"
            Date:
              schema:
                type: string
                example: Fri, 17 Jan 2025 13:15:21 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                success: false
                message: Invalid credentials
  /api/account/general/loginClear:
    post:
      tags:
        - AccountGeneral
      summary: Account - General - Login Email
      description: |-
        This endpoint is titled "Account - General - Login Email". It defines how to post (create) a login request for an account using email and password credentials.

        - **Request Method:** The request method is POST. This method is used when you want to send data to the server. Here, it is used to submit the login credentials to the server.

        - **URL:** The URL where the request is sent to is "http://localhost:3000/api/account/general/loginClear". 

        - **Headers:** There's a single header in this request:
          - "Client-UUID" is the key of the header, and "ClientUUID" is its corresponding value. This serve as a unique identifier for the client making the request.

        - **Body:** The body of the request is a JSON object containing two fields:
          - "email" field for the user's email address. Replace "email" with actual email-address.
          - "password" field for the user's password. Replace "password" with actual password.

        - **Auth:** The authorization method used is the "bearer" type.
          - "token" is the key, and "BearerToken" is its corresponding value. Replace "BearerToken" with actual token. It's used to validate the request. Bearer type auth is a security measure to prevent unauthorized access.
          
        Remember to replace the placeholders in "value" with actual values before making a request. The actual values are typically generated or provided by the back-end system or are set up in your configuration files. This endpoint takes these details and uses them to attempt a login, and subsequently sends a valid or invalid response based on whether the authentication was successful or not.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"email\":\"email\",\"password\":\"password\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: OK
          headers:
            X-Powered-By:
              schema:
                type: string
                example: Express
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '518'
            ETag:
              schema:
                type: string
                example: W/"206-b3OQDEnGC+KJmh5o+pCyAkiEpDg"
            Date:
              schema:
                type: string
                example: Fri, 17 Jan 2025 13:11:36 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                message: Login successful
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiYjI3MjI4MDEtNjA5NS00YWRkLThlODMtZWQ2NDNjOTBhNGQzIiwicGhvbmVubyI6IisxMzEyMzQ3NTMxMyIsImlhdCI6MTczNzExOTQ5NiwiZXhwIjoxNzM3MjA1ODk2fQ.uc5t6lY3o8049Vr8nD8-FYDqo0djG8rXsa5iIoeRZE4
                user:
                  _id: b2722801-6095-4add-8e83-ed643c90a4d3
                  phoneno: '+13123475313'
                  firstname: test
                  lastname: user
                  email: testingemai755125@gmail.com
                  zipcode: '12345'
                  dob: '1998-12-31T19:00:00.000Z'
                  lang: en
                accessCode: true
        '401':
          description: Unauthorized
          headers:
            X-Powered-By:
              schema:
                type: string
                example: Express
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '49'
            ETag:
              schema:
                type: string
                example: W/"31-VmptvJVCxgMiCaKMQdd9IkNBIdc"
            Date:
              schema:
                type: string
                example: Fri, 17 Jan 2025 13:15:21 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                success: false
                message: Invalid credentials
  /api/account/general/login:
    post:
      tags:
        - AccountGeneral
      summary: Account - General - Login Phone
      description: |-
        This endpoint is named "Account - General - Login Phone". 

        - It uses the POST request method, meaning this endpoint is used to submit data to be processed to the URL "http://localhost:3000/api/account/general/login".

        - The request headers are currently empty and disabled by default. Although not in use at the moment, these could provide the server with additional instructions or information about the format or language of the request. 

        - The body of the request contains a JSON object with two properties, "phone" and "password". These properties are likely used to validate the identity of the user trying to initiate a new session. In this case scenario, the user tries to login with their phone and password.

        - The request uses Bearer Token Authentication, a method of HTTP authentication that allows users to access protected resources with a cryptic string - the bearer token. The "token" key is assigned to the value "BearerToken". This bearer token would typically be randomly generated and associated with the user's session, and be used to authenticate subsequent requests.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"phone\":\"phone\",\"password\":\"password\"}"'
      security:
        - bearerAuth: []
      responses:
        '401':
          description: Unauthorized
          headers:
            X-Powered-By:
              schema:
                type: string
                example: Express
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: '*'
            Content-Type:
              schema:
                type: string
                example: application/json; charset=utf-8
            Content-Length:
              schema:
                type: integer
                example: '49'
            ETag:
              schema:
                type: string
                example: W/"31-VmptvJVCxgMiCaKMQdd9IkNBIdc"
            Date:
              schema:
                type: string
                example: Fri, 17 Jan 2025 13:15:21 GMT
            Connection:
              schema:
                type: string
                example: keep-alive
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
          content:
            application/json:
              schema:
                type: object
              example:
                success: false
                message: Invalid credentials
  /api/account/general/forgot:
    post:
      tags:
        - AccountGeneral
      summary: Account - General - Forgot Phone
      description: |-
        This endpoint description is for the "Account - General - Forgot Phone" functionality. 

        The endpoint is expecting a `POST` request at the URL `http://localhost:3000/api/account/general/forgot`.

        In the request header, there's one key-value pair. The key `"Client-UUID"` which should have the value that identifies the client, usually a unique string provided by the server for each user—"ClientUUID" in this given scenario.

        Request body requires a JSON formatted string containing the phone number that needs to be recovered. The key for this must be "phone" and its value will be the user's phone number.

        Authorization type is `Bearer` so you should supply a bearer token in the header for authorization, using the key "token" and corresponding token value as "BearerToken".

        This endpoint is generally used when a user forgets their connected phone number to the account and needs to bring up that information.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"phone\":\"phone\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/general/session:
    get:
      tags:
        - AccountGeneral
      summary: Account - General - Session - Get Account Type
      description: |-
        The endpoint described is named `Account - General - Session - Get Account Type`. It's a GET type HTTP request that is made to the URL `http://localhost:3000/api/account/general/session`.

        This URL accepts three query parameters: `accountId`, `sessionId`, and `get`. 

        1. The `accountId` parameter is used to specify the unique identifier of the account for which the type is being requested.
           
        2. The `sessionId` parameter is being used to determine the valid session from which the request is made.
           
        3. The `get` parameter value is set to `accountType`, which indicates the type of information being requested from this API endpoint.

        For authentication, this endpoint requires a bearer token which is passed under the `auth` object. The `key` is set to `token` and its `value` needs to be replaced with the actual `BearerToken`.

        The headers part of the request is currently empty and disabeled, indicating that no additional metadata is being sent in the request header.

        The body of the request is also empty, which is consistent with a GET type request that normally does not contain a body but fetches data based on provided parameters in the URL.

        This endpoint basically provides a method for developers to retrieve the type of the account linked with the provided `accountId` during an active, authenticated `sessionId`.
      security:
        - bearerAuth: []
      parameters:
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: get
          in: query
          schema:
            type: string
          example: accountType
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/general/reset:
    put:
      tags:
        - AccountGeneral
      summary: Account - General - Reset Password
      description: |-
        This endpoint is named "Account - General - Reset Password". It is designed to handle PUT requests for resetting a user's password in the account. 

        The URL where this request is sent to is: http://localhost:3000/api/account/general/reset. 

        This request does not use any specific headers (the provided header field is made blank by default and thus disabled). 

        In the body of the request, a JSON object is sent that includes values for the sessionId, email, and the new password. The respective values should replace the placeholders: "sessionId", "email", and "helloworld".

        The authentication required for this endpoint is of type `bearer`. The bearer token to authenticate the request is provided in the `auth` section, with the key named 'token' and value 'BearerToken'. The type of the bearer token is string. 

        In a nutshell, when this endpoint is hit with appropriate values in the request body and the bearer token, the password for the associated email account will be reset. This is a sensitive operation so the token is mandatory for giving access and validating the request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"email\":\"email\",\"password\":\"helloworld\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/general/logout:
    post:
      tags:
        - AccountGeneral
      summary: Account - General - Logout
      description: |-
        This endpoint is named "Account - General - Logout". It's used to log out an account from the service. It uses the POST method, meaning it's sending data to a specified resource, in this case, the logout URL.

        The URL of the endpoint is "http://localhost:3000/api/account/general/logout". "localhost:3000" is usually used for local development, so it might vary when deployed.

        In the headers section, it's currently empty with default type and it is disabled. Headers usually contain additional information for processing the request or response. In this case, none is needed.

        The body of the request contains the data JSON format which includes two properties: "sessionId" and "accountId". These are placeholders and need to be replaced with actual values when making a request. Typically, "sessionId" is to identify a user's current session, generated when a user logs in, and "accountId" is the unique identifier of the user's account. Both are required to successfully process a logout request.

        For authentication, this endpoint uses the bearer authentication scheme. This simply sends the token with a 'Bearer ' prefix in the Authorization header. The key is labeled "token" and the value is "sessionId", where "sessionId" corresponds to the current session's ID. This is most likely used to ensure only the authorized user can log out their account. 

        In summary, to use this endpoint to log out a user, you need to make a POST request to the provided URL, send the sessionId and accountId within the body of the request in JSON format, and send the sessionId as bearer token in the auth section.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/keys/create:
    post:
      tags:
        - AccountKeys
      summary: Account - Keys - Create
      description: |
        Endpoint Name: "Account - Keys - Create"

        This is an endpoint to create a key for a specified account. Below is the detailed information about every data used in the request for this endpoint:

        1. **auth**: This is used for authorization purpose. 

           a. **type:** The type field specifies the kind of authorization being used, which is 'bearer' in this case.
           
           b. **bearer:** It's an array that holds the bearer token information. 

           - **key:** Specifies the identifier for the bearer token which is denoted as 'token'. 
           
           - **value:** Denotes the actual bearer token value. Replace 'BearerToken' with your actual bearer token.
           
           - **type:** The type of the data the token represents. It's a string in this case.


        2. **method**: This represents the HTTP method to be used for this request. Here it's 'POST', which means we are sending data to be processed to a specified resource.

        3. **url**: The URI where the request is being sent. In this case, it's http://localhost:3000/api/account/keys/create, where a new key will be created for the account.

        4. **headers**: It represents metadata sent with the HTTP request. 

            a. **key:** Specify your header key here. 

            b. **value:** The value of the corresponding header key goes here. 

            c. **type:** The type of data the header value represents, which is 'default' in this case. 

            d. **disabled:** If set to true, the header will not be sent with the request.

        5. **body**: Contains data to be sent to the server.

           a. **mode:** Specifies how you want to send the data. Value 'raw' means you are sending the data as it is.

           b. **raw:** This contains actual data being sent. 

              - **accountId:** This should be replaced with the actual account id. 
              - **sessionId:** Here goes the actual session id.
              - **country, region, city, postal:** The geographical information about where the request is being sent from.
              - **latitude, longitude:** The geographical coordinates from where the request is being sent.
              - **ipAddress:** IP address of the client from where the request originated.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"accountId\":\"accountId\",\"sessionId\":\"sessionId\",\"country\":\"United States\",\"region\":\"California\",\"city\":\"San Francisco\",\"postal\":\"94109\",\"latitude\":\"-123.423\",\"longitude\":\"123.123\",\"ipAddress\":\"12.45.67.89.0\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/keys/update:
    put:
      tags:
        - AccountKeys
      summary: Account - Keys - Update
      description: |-
        This endpoint is titled "Account - Keys - Update" and it's used to update the specific keys related to an account in a system. It sends a PUT HTTP request to the given URL, "http://localhost:3000/api/account/keys/update". PUT is a method used to update resource available on the server. Here is a detailed explanation about each component in the request:

        1. `auth`: This object sets the authorization strategy for your request. Here, it's a bearer token authorization. It contains a bearer token string which needs to be passed in the 'token' key.

        2. `method`: This field is for specifying the HTTP method. In this case, it's a PUT method which is used for updating existing resources.

        3. `url`: This is the endpoint URL where the request will be sent. Here, it's running on localhost on port 3000.

        4. `headers`: This is a list where you define request headers. Here, we have a "Client-UUID" key with a default string value, which is likely used to uniquely identify the client.

        5. `body`: This is the request payload, it contains necessary information to update an account's keys. The 'mode' property is set as 'raw', implying that you have to provide a input JSON object in 'raw' format.

            - `keysId`: Unique identifier for the keys associated with an account.
            - `sessionId`: The session identifier.
            - `accountId`: The account identifier.
            - `country`: The country associated with the key's location (in this case, "United States").
            - `region`: The region associated with the key's location (here, "California").
            - `city`: The city associated with the key's location (here, "San Jose").
            - `postal`: The postal code associated with the key's location.
            - `latitude` and `longitude`: Geographical coordinates for the key's location.
            - `ipAddress`: The IP address associated with the request to update the keys.
            
        It's important to provide valid data for all these fields for the request to be processed correctly.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"keysId\":\"f7e29500-b1a9-4d5a-a68b-23ece984b2d4\",\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"country\":\"United States\",\"region\":\"California\",\"city\":\"San Jose\",\"postal\":\"94109\",\"latitude\":\"-123.423\",\"longitude\":\"123.123\",\"ipAddress\":\"12.45.67.89.0\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/keys/get:
    get:
      tags:
        - AccountKeys
      summary: Account - Keys - Get
      description: |-
        The provided endpoint contains detailed information about how to retrieve account keys using a GET request. Here's a detailed explanation for each data point:

        1. "name": This represents the name of the endpoint. In this case, the name is "Account - Keys - Get", signifying that this endpoint is utilized to retrieve keys associated with a specific account.

        2. "request": This field specifies the type of the request, the associated authorization details, the target URL of the request, headers, and the body. Each attribute under this field is as follows -

           a. "auth": The "auth" field contains details about the authorization required to use this API. It includes type of the authorization, which is "bearer" and the object array "bearer" that includes the "key", which is the authorization token name, "value", which is the bearer token, and "type" which is the datatype of the token.

           b. "method": This is the request method, which for the provided endpoint is GET. This means data is being retrieved or 'got' from the server.

           c. "url": This is the URL where the API request would be sent. The URL parameters include keysId, sessionId, and accountId. These parameters are used to specify a unique set of keys, session, and account respectively that are targeted by this request.

           d. "headers": Headers let the server and client pass additional information with an HTTP request. In this case, no key-value pairs are provided and it's set to default, meaning no custom headers are being used unless they are disabled.

           e. "body": The "body" field provides the request's body. As per the provided data, "mode" suggests it's in "raw" form. However, since the request method is GET, the "raw" body is empty.

        If you're using this API, make sure to replace the dummy "token", "keysId", "sessionId", and "accountId" with actual valid values.
      security:
        - bearerAuth: []
      parameters:
        - name: keysId
          in: query
          schema:
            type: string
          example: keysId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/keys/all:
    get:
      tags:
        - AccountKeys
      summary: Account - Keys - Get All
      description: |-
        This endpoint is called "Account - Keys - Get All". It's responsible for fetching all the keys related to a particular account.

        Here is a description of all the elements in the endpoint:

        1. **name:** This is the name of the endpoint. This is how you would refer to the endpoint in the documentation or when discussing it with other developers. In this case, the name indicates that this endpoint is used to get all keys for a given account.

        2. **request:** This object contains all information required to make the HTTP request.

        3. **auth:** This is the authorization method that is used when making the request. For this endpoint, the authorization is of the type "bearer" which means it uses a bearer token for authorization. A bearer token is a type of access token that is issued to the client.

        4. **bearer:** This is an array of objects that contains the bearer token for the request. Each object has a "key", "value", and "type". The "key" is the name given to the token, the "value" is the actual value of the token, and the "type" is the data type of the token.

        5. **method:** This is the HTTP method used for the request. In this case, it's a "GET" request, which means data is being retrieved from the server. 

        6. **url:** This is the URL where the request will be sent. In our case, it's "http://localhost:3000/api/account/keys/all/?sessionId=sessionId&accountId=accountId". It includes query parameters for "sessionId" and "accountId", presumably used to identify the relevant session and account.

        7. **headers:** This is an array of objects, each representing a header that will be included in the request. Currently, the endpoint provides a default empty header which is disabled. Headers can include metadata about the request or other necessary information.

        8. **body:** This is the body of the request. For this endpoint, the "body" is set as "raw", but no data is needed or included as part of the request since it's a "GET" request.

        This is a high-level overview of the endpoint data. For all specific data usage, please refer to the application's API documentation or any inline comments provided in the application code.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/keys/delete:
    post:
      tags:
        - AccountKeys
      summary: Account - Keys - Delete
      description: |-
        The data provided describes the details of an Endpoint (in an API) for Account - Keys - Delete operation. Here's a detailed description of each datapoint:

        1. **name**: This represents the name of the endpoint, which in this case is "Account - Keys - Delete". This endpoint is designed to delete keys from a specific account.
           
        2. **request**: This encapsulates all the details needed to make the actual HTTP request.
           
        3. **auth**: This field describes the authorization details used for the request. It uses a bearer token for authorization. 

            - **type**: The type of authentication applied, which is "bearer" in this case.
           
            - **bearer**: This is an array containing bearer token details. Each object inside the bearer array includes:

                - **key**: The key is set as "token".
               
                - **value**: It holds the actual token value, denoted as "sessionId".
               
                - **type**: Defines the datatype of the value of the key, here it is "string".

        4. **method**: The HTTP method used for the request. In this case, the request method is POST which is typically used to send data to the server.

        5. **url**: The URL where the API request is to be sent. In this case, it's "http://localhost:3000/api/account/keys/delete".

        6. **headers**: An array containing the details of the headers to be sent along with the request. This example has a default header with no key-value pair.

        7. **body**: Contains the details of the body to be sent along with the request.
            
            - **mode**: This field tells what type of body is being sent with the request, here it's "raw".
                
            - **raw**: This contains the raw data in the form of a JSON object to be sent in the body of the request. It contains three fields
         
                - **sessionId**: String representing the session identifier.
               
                - **accountId**: String representing the account identifier.
               
                - **keysId**: String representing the keys identifier to delete from the account.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"keysId\":\"keysId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/location/create:
    post:
      tags:
        - AccountLocation
      summary: Account - Location - Create
      description: |-
        This endpoint is referred to as "Account - Location - Create". It uses a "POST" method for creating a new location entry for a specific account. Below is the detailed description of each field in this endpoint.

        1. **name**: This field indicates the name of this endpoint, which is "Account - Location - Create".

        2. **request**: This field contains all the necessary information required to make a request to this endpoint.

        3. **auth**: This field specifies the authentication method needed for this endpoint. In this case, it's 'Bearer' authentication and the token is provided as the value.

            a. **type**: The type of authorization required which is 'Bearer'.
            
            b. **bearer**: An array containing the key-value pair for bearer token. The key is 'token' and the value is 'BearerToken'. The type confirms the value is a string format.

        4. **method**: The HTTP method used for the request. For this endpoint, it's "POST".

        5. **url**: The URL for the request is 'http://localhost:3000/api/account/location/create'.

        6. **headers**: An array that contains the key/value pairs to be sent in the header of the request. In this case, it's empty and disabled.
           
        7. **body**: This field contains the data to be sent with the request. 

            a. **mode**: Specifies the mode of the body of the request. Here it is in 'raw' format.
            
            b. **raw**: The raw data to be included in the body of the request, described in JSON format. It contains the following keys:

                    - accountId: Identifies the account for which the location is to be created.
                    - sessionId: Identifies the session related to the account.
                    - country: The country of the location (e.g., "United States").
                    - region: The region of the location (e.g., "California").
                    - city: The city of the location (e.g., "San Francisco").
                    - postal: The postal code of the location (e.g., "94109").
                    - latitude: The geographical latitude of the location (e.g., "-123.423").
                    - longitude: The geographical longitude of the location (e.g., "123.123").
                    - ipAddress: The IP address related to the location (e.g., "12.45.67.89.0").

        Thus, this endpoint is used to create a location entry for an account with the provided attributions in JSON format within the body of the request. The endpoint requires 'Bearer' authentication and the request is of 'POST' type.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"accountId\":\"accountId\",\"sessionId\":\"sessionId\",\"country\":\"United States\",\"region\":\"California\",\"city\":\"San Francisco\",\"postal\":\"94109\",\"latitude\":\"-123.423\",\"longitude\":\"123.123\",\"ipAddress\":\"12.45.67.89.0\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/location/update:
    put:
      tags:
        - AccountLocation
      summary: Account - Location - Update
      description: |-
        This endpoint is titled "Account - Location - Update". It gives you the ability to update the location details of a specific account. The request uses a 'PUT' method which indicates this action of modification.

        The request is authenticated with a token, provided as a "bearer" type. The key for this authentication method is simply called "token" and the value it uses is named "BearerToken". The type of value it requires is a string.

        The request URL is "http://localhost:3000/api/account/location/update".

        The header of the request contains a "Client-UUID". This is a default type of key that holds "ClientUUID" as a value. It aids in uniquely identifying each client connection.

        The request body uses the "raw" mode and contains all the information related to the account location to be updated. The individual data descriptions are as follows:

        - "locationId": a unique identifier for a particular location
        - "sessionId": a unique identifier for the current session
        - "accountId": a unique identifier for the specific account
        - "country": the name of the country of the location
        - "region": the name of a specific region within the country
        - "city": the name of the city 
        - "postal": the postal or zip code 
        - "latitude": the latitude coordinate for the location 
        - "longitude": the longitude coordinate for the location 
        - "ipAddress": the IP address of the user updating the location

        All data values in the body are assumed to be strings, and as such they must be enclosed in quotes.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"locationId\":\"f7e29500-b1a9-4d5a-a68b-23ece984b2d4\",\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"country\":\"United States\",\"region\":\"California\",\"city\":\"San Jose\",\"postal\":\"94109\",\"latitude\":\"-123.423\",\"longitude\":\"123.123\",\"ipAddress\":\"12.45.67.89.0\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/location/get:
    get:
      tags:
        - AccountLocation
      summary: Account - Location - Get
      description: |-
        This data refers to an API endpoint named "Account - Location - Get". It deals with retrieving location related information associated with a specific user account. 

        1. "name": This field refers to the name of the API endpoint. In this case, the name of the endpoint is "Account - Location - Get".

        2. "request": This field contains the details for making the API request.
           
            a. "auth": This section contains information related to the method of authentication. The "type" field indicates that a bearer token is being used for the API request authorization. The "bearer" array holds information about the token key and its value.
           
            b. "method": This field specifies the HTTP method to be used for the request, which is "GET" in this case.
           
            c. "url": This field defines the exact URL to which the request is to be sent. It contains parameters called "locationId", "sessionId", and "accountId". These parameters are placeholders and are expected to be replaced by actual values during the execution of the request. 

            d. "headers": This field represents the HTTP headers to be sent with the request. The "key" and "value" are left blank intentionally indicating that there are no additional headers needed for this request.

            e. "body": This field represents the body of the request. "mode" field specifies that the body content type is "raw". However, the "raw" field doesn't contain any data, indicating that GET request does not require a body.

        Remember to replace all the placeholder values in the "url" with actual values before sending the request. Also, ensure that the "token" field under "auth" is updated with a valid bearer token for successful authorization.
      security:
        - bearerAuth: []
      parameters:
        - name: locationId
          in: query
          schema:
            type: string
          example: locationId
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/location/all:
    get:
      tags:
        - AccountLocation
      summary: Account - Location - Get All
      description: |-
        This endpoint is named "Account - Location - Get All". Its main function is to retrieve all the location data related to a specific account.

        The request uses a 'GET' method, which implies that information is being fetched from this particular URL: "http://localhost:3000/api/account/location/all/?sessionId=sessionId&accountId=accountId". From this URL, we can observe that the request is being sent to an API related to account locations, on a locally hosted server (localhost) running on port 3000. 

        Two parameters are required in the root URL - 'sessionId' and 'accountId'. The 'sessionId' parameter is likely tied to the active session of the requester, presumably for security and tracking purposes. The 'accountId' parameter is probably related to the specific account from which all location data are required. Both of these parameters should be populated with appropriate values for this request to function correctly. 

        Bearer token authentication is utilized for this request as specified under the 'auth' section. This indicates that a token, identified by "BearerToken" under the bearer section would need to be provided for successful validation and subsequent execution of this request. 

        No specific headers are required for this request as the key-value pair under the 'headers' section is left empty and is marked as "disabled". 

        The 'body' mode for this request is set to 'raw', but since no raw input is mentioned, it is concluded that this endpoint does not need an HTTP body payload. 

        In Summary, to use this endpoint, one would need the two parameters 'sessionId' and 'accountId' to be correctly filled in the URL, as well as a valid bearer token to be supplied under the 'auth' section.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/location/delete:
    post:
      tags:
        - AccountLocation
      summary: Account - Location - Delete
      description: |-
        This endpoint is named "Account - Location - Delete", suggesting it is used to remove a location record associated with a certain account.

        Authorization for this endpoint is provided through a bearer token. The "key" is named "token" and its "value" is obtained from a session ID, which is represented as a string.

        The request method for this endpoint is POST. This implies that it sends data to the server to create a new resource (in this case, a deletion request).

        The URL designated for this endpoint is "http://localhost:3000/api/account/location/delete". This is where the server listens for incoming requests. It's on your local machine, specifically, as is indicated by "localhost:3000".

        There's an array of headers in the request where you can set additional information about the request. It currently contains a default header with empty key-value pair that is disabled.

        The "body" section carries the data for the request. Its mode is "raw" which means the data is sent as is, a JSON payload in this case. The "raw" field contains a JSON string which includes "sessionId", "accountId", and "locationId". This implies that the deletion operation should target the "locationId" attached to an "accountId" within the current "sessionId".

        Recap: This endpoint deletes a location associated with a given account in the provided session, as indicated by the respective IDs in the request body. It uses bearer token authorization parsed from a session ID.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"locationId\":\"locationId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/send/accountCreated:
    post:
      tags:
        - AccountSend
      summary: Account - Send - Account Created
      description: |-
        The provided data appears to be related to an API endpoint specifically designed to confirm the creation of an account. The key elements can be broken down as follows:

        - **name:** The name is 'Account - Send - Account Created'. It identifies this particular endpoint. This string is typically used by developers to understand what the endpoint is for, particularly during testing.

        - **request:** This details the HTTP request to be made; in this case, a POST request.

          - **auth:** This object details the authentication required in order to access this endpoint. Specifically, it uses a 'bearer token' type of authentication. The token (value = 'BearerToken') must be supplied in string format (type = 'string') to gain access.

          - **method:** The HTTP method used is 'POST'. This is generally used to send data to a server to create/update a resource.

          - **url:** The URL for this endpoint is 'http://localhost:3000/api/account/send/accountCreated'. This is the target address on the server where the HTTP request should be sent.

          - **headers:** The headers object is generally used to define the operating parameters for HTTP transactions. Here, the only defined header element is set to 'default' type and is disabled (disabled = true). The key and value are both empty, meaning no specific HTTP header is defined.

          - **body:** The body object pertains to data that must be sent in the HTTP request. In this case, the body content is in 'raw' format (mode = 'raw'), featuring a JSON string that includes 'sessionId' and 'accountId'. These are placeholders for the actual session ID and account ID that should be sent in the body of the POST HTTP request.
          
        Every time a POST request is made to this endpoint, an account is created, identified by the 'sessionId' and 'accountId'. This endpoint, therefore, is critical in creating user accounts for your application.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/send/verificationEmail:
    post:
      tags:
        - AccountSend
      summary: Account - Send - Verification Email
      description: |-
        This data describes an endpoint titled "Account - Send - Verification Email". 

        1. `name`: This defines the name of the endpoint. It is named "Account - Send - Verification Email". 

        2. `request`: This section houses all the information about the HTTP request that is sent to the server. 

            A. `auth`: The `auth` section describes the type of authorization used for the request. The type specifies the format of authorization, and in this case, it is 'bearer'. The `bearer` is an array of authentication-related objects.
            
                 - `key`: The key is the identifier for the authentication value. Here, it is labeled "token".
                 - `value`: The value tag in the bearer array symbolizes the actual token value. Here, it is represented as "BearerToken".
                 - `type`: The type indicates the data type of the bearer token. Here, it is "string".

            B. `method`: The method property indicates the HTTP method used to send the request to the API. In this case, it's a "POST" request.

            C. `url`: This is the URL that the API request will be sent to. Here, it is "http://localhost:3000/api/account/send/verificationEmail".

            D. `headers`: An array of objects signifying the collection of HTTP headers enclosed with the request.
            
                 - `key`: This element indicates the name of the header field. It is empty in this case.
                 - `value`: This represents the associated value for the corresponding header key. In this case, it is also empty.
                 - `type`: Denotes the header content type. It is labeled as "default" in this instance.
                 - `disabled`: Shows whether the header is enabled or not. In this case, it is set to true, meaning the header is disabled.

            E. `body`: Contains the actual request body sent to the API.
            
                - `mode`: Determines the format of the body sent with the request. In this case, it is "raw", indicating unprocessed data.
                - `raw`: Contains the actual raw body content. Here, it is a JSON string with property "email" and value "email".
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"email\":\"email\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/send/verificationSMS:
    post:
      tags:
        - AccountSend
      summary: Account - Send - Verification SMS
      description: |-
        This endpoint is named `Account - Send - Verification SMS`. It uses the `POST` method to send a verification SMS to a user's phone.

        - `auth`: The endpoint uses `bearer` authentication, which means you need to provide a bearer token in the request header. The key for this token is `token` and its initial value is `BearerToken`. The token's data type is `string`. You will likely replace `BearerToken` with an actual token value when you run this endpoint.

        - `method`: This is a `POST` endpoint. That means it is designed to accept and process the submitted data.

        - `url`: The endpoint's URL is `http://localhost:3000/api/account/send/verificationSMS`. You can replace `localhost:3000` with any server's address where this API is running.

        - `headers`: By default, this API does not require any additional request headers. The header object is set to `disabled` and both the `key` and `value` properties are empty strings. You can add headers if required for your application.

        - `body`: The body of the request should be a 'raw' JSON object that includes the phone number where the verification SMS will be sent. The `phone` field should contain the phone number.

        Remember to replace the `BearerToken` with an actual bearer token and the `phone` field value with an actual phone number when you run this endpoint.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"phone\":\"phone\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/send/emailAddressChanged:
    post:
      tags:
        - AccountSend
      summary: Account - Send - Email Address Changed Notification
      description: |-
        1. "name": This field contains the name of the current action that's been taken; in this case, it is sending a notification about an account email address change.

        2. "request": This field encapsulates all the data related to making the specific API request.

        2.1. "auth": It represents the authentication of the API request. The "type" of authentication here is a "bearer" token which means that the sender is the bearer of the token.

            2.1.1. "bearer": It is an array containing the bearer token type credentials, represented by an object holding the properties "key", "value", and "type". The "key" value is the token name, "value" is the actual token, and "type" indicates the data type of the value as string.

        3. "method": This field represents the HTTP method used for the API request. A "POST" method is used here which generally means the request is intended to send data to the server.

        4. "url": This field specifies the URL where the API request would be sent.

        5. "headers": This field is an array of objects which contains the additional information to pass together with the request. Here, an object is present with "key" as "Client-UUID", a unique identifier for the client, the "value" is the actual UUID value and "type" indicates it's a default header.

        6. "body": This section includes the exact data that'll be sent with the POST request.

            6.1. "mode": This field signifies the way the body will be sent. In this case, "raw" indicates the body content will be sent as a raw data string.

            6.2. "raw": This field consists of the actual raw data string which is a JSON string including "sessionId", "accountId", and "email" as properties. "sessionId" represents the session's unique identifier, "accountId" is the account's unique identifier and "email" is the new email address.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"email\":\"email\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/send/phoneNumberChanged:
    post:
      tags:
        - AccountSend
      summary: Account - Send - Phone Number Changed Notification
      description: |-
        This endpoint accepts a POST request to the path "http://localhost:3000/api/account/send/phoneNumberChanged". It's used to notify the system that the phone number associated with the provided account has been changed.

        Let's break the request into parts:

        1. `"name"`: The name field provides a descriptive label for the endpoint. In this case, the name suggests an action, which in terminalogy, "sends a notification for a changed phone number on an account".

        2. `"auth"`: This is the type of authorization needed to access the endpoint with bearer as the authentication method. This means a bearer token needs to be attached in the header of the request for successful authorization. 
           - `"key"`: Describes the key used within the bearer authorization, which here is "token".
           - `"value"`: The value associated with the key. For this request, the value should be the actual bearer token, "BearerToken" is just a placeholder.

        3. `"method"`: The HTTP verb associated with the request. In this case, it's a "POST" method, which is typically used to send data to a server to create a new resource.

        4. `"url"`: The URL field contains the endpoint's path. This is required for determining where the request will be sent.

        5. `"headers"`: These are additional pieces of information required by the server.
           - `"key"`: The header's key which is "Client-UUID".
           - `"value"`: The value associated with the key in the header, represented here by "ClientUUID".

        6. `"body"`: Contains the data that is sent to the server. In "raw" mode, the data must be a string, often in JSON format.
           - `"sessionId"`: Identifies the current user's session. This ID is unique to a user's session.
           - `"accountId"`: The unique identifier for the user's account.
           - `"email"`: The email associated with the user's account.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"email\":\"email\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/send/passwordChanged:
    post:
      tags:
        - AccountSend
      summary: Account - Send - Password Changed Notification
      description: |-
        This endpoint is named "Account - Send - Password Changed Notification". It is responsible for sending notification when a user changes their password.

        **Authentication:**
        The endpoint requires Bearer authentication. The bearer token needs to be provided in under the "token" key.

        Key: 'token'
        Value: 'BearerToken'
        Type: 'string'

        The value is where you'll substitute the actual bearer token when making your request.

        **Method:**
        The request method for this endpoint is POST.

        **URL:**
        This endpoint is to be hit at 'http://localhost:3000/api/account/send/passwordChanged'. This URL is bound to change depending on the environment/server where this service is deployed.

        **Headers:**
        This endpoint requires one additional header 'Client-UUID' which must be included with each request. The value for 'Client-UUID' corresponds to your project's unique identifier.

        Key: 'Client-UUID'
        Value: 'ClientUUID'
        Type: 'default'

        **Body:**
        The request body should be in `raw` mode and contains the following keys:

        - sessionId : Represents the ongoing session ID.
        - accountId : The unique identifier of the account.
        - email : The email associated with the account.

        An example body would look like 

        ```json
        {
          "sessionId":"MySessionId",
          "accountId":"MyAccountId",
          "email":"MyEmail"
        }
        ```

        In this example, `MySessionId`, `MyAccountId`, and `MyEmail` should be replaced with actual values while making the request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"email\":\"email\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/send/passwordResetEmail:
    post:
      tags:
        - AccountSend
      summary: Account - Send - Password Reset Code to Email
      description: |-
        Here's a detailed description of each data field in this API endpoint:

        1. "name" - This denotes the name or title of the API endpoint. It's a significant identifier that describes what the API endpoint does. In this case, "Account - Send - Password Reset Code to Email" suggests that the API endpoint is used to transmit password reset codes to email addresses linked with user accounts.

        2. "request" - This outlines the specifics of the HTTP request that will be made. It includes several sub-components detailing the manner and content of the method.

        3. "auth" - This presents information about the authentication protocol that the API will employ for the HTTP request. The "type" is "bearer", implying that the request will utilize bearer token authentication.
           
            "bearer" is an array comprises a single object carrying three properties:
           
           - "key": Represents the header field for the bearer token, here it is named as "token".
           
           - "value": The actual token/credential that's used for authentication. Here it's called "BearerToken".
           
           - "type": Describes the data type of the "value". In this case, it is a string.

        4. "method" - This data field signifies the HTTP method for the request. In this case, "POST" indicates that the endpoint is expecting data to be sent in the request body for processing.

        5. "url" - This contains the exact URL that the request will call. Here the API endpoint is hosted locally on port 3000.

        6. "headers" - This includes any headers required for the request. In this case, a client UUID (Universally Unique Identifier) should be mentioned as the header with the key called "Client-UUID".

        7. "body" - This pertains to the main content of the request. "mode" is set to "raw", which means the request will be made with the raw data as is, without any encoding or modifying. Under "raw", several items need to be sent in JSON form:
           
           - "sessionId": A unique identifier for a single browsing session.
           
           - "accountId": Identifier for a specific user account.
           
           - "securityCode": Security code arranged to verify the identity of the user. In this example, its value is set as '123'.
           
           - "email": The email address linked with the user's account. In this case, `fortunevieyra@icloud.com` is the account email where the reset password link will be dispatched.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"securityCode\":\"123\",\"email\":\"fortunevieyra@icloud.com\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/send/passwordResetSMS:
    post:
      tags:
        - AccountSend
      summary: Account - Send - Password Reset Code to SMS
      description: |-
        This endpoint is named "Account - Send - Password Reset Code to SMS". It adopts the POST method, indicating that it is designed to push (insert) data to the server. The request URL of this endpoint is "http://localhost:3000/api/account/send/passwordResetSMS". This suggests that it is locally hosted and used for sending password reset codes to a specified SMS.

        It requires bearer authentication. It means you need to supply a bearer token which is used to authorize and authenticate the request.

        "token": This is a string type data where the bearer token should be placed. The placeholder value here is "BearerToken."

        Under Headers, we find additional authorization parameters.

        "Client-UUID": It refers to the unique identifier used to recognize individual clients invoking this API endpoint. Put your Client UUID in the place of 'ClientUUID' here.

        Coming to the body of the endpoint, it contains a raw JSON object with the following data,

        "sessionId": It refers to the unique session identifier. Replace 'sessionId' with the actual session Id.

        "accountId": It refers to a specific user's account identifier. 'accountId' here needs to be replaced with the actual account Id.

        "securityCode": A placeholder (123456) for the security code used in the password reset process. It should be replaced with a real security code.

        "phone": A placeholder (18327051031) for the phone number to which the password reset SMS will be sent. It should be replaced with the target phone number.
          
        Please ensure to replace all the placeholder values with real-time data while using this endpoint.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"securityCode\":\"123456\",\"phone\":\"18327051031\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/send/newMessage:
    post:
      tags:
        - AccountSend
      summary: Account - Send - New Message Notification Email
      description: |-
        The provided data describes a POST endpoint for sending a new message notification email in an account.

        1. `name`: This is the unique identifier or the title of the endpoint. In this case, it is "Account - Send - New Message Notification Email".

        2. `request`: This encapsulates all the information needed to make the API call.

           - `auth`: Specifies the authentication details.
             - `type`: It denotes the type of authentication. Here, it is a "bearer" type.
             - `bearer`:[{...}]: This array contains an object defining a bearer token, specified by:
               - `key`: The key "token" used for identification during authentication.
               - `value`: It is the actual bearer token to be used. Here, it is denoted as "BearerToken".
               - `type`: It defines what type of data the bearer token is. Here, it is a "string".

           - `method`: The HTTP method employed for calling the API. Here, it is "POST".
          
           - `url`: The URL to which the request is made. For the given data, the API endpoint is "http://localhost:3000/api/account/send/newMessage".

           - `headers`: An array containing all the headers to be included in the request.
             - `key`: The identifying key for the header. Here, it is "Client-UUID".
             - `value`: The corresponding value to the key. In this case, "ClientUUID".
             - `type`: The kind of header it is. Here, it is "default".

           - `body`: This includes the body of the HTTP request.
             - `mode`: Indicates the mode of the request body. For this endpoint, it's "raw".
             - `raw`: Contains the actual body of the request sent to the server as a raw string. This string could ideally be a properly formatted JSON, XML, or even just plain text. Here, it is a JSON string containing sessionId, accountId, sender and message properties.
          
        The body values:
        - `sessionId`: The unique identifier for a specific session.
        - `accountId`: Represents the id of the account.
        - `sender`: A string that represents the sender's name. In this case,  "Fortune Vieyra".
        - `message`: The actual content of your message. Provided example is a greeting, "Hello World".
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"sender\":\"Fortune Vieyra\",\"message\":\"Hello World\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/send/newFollowers:
    post:
      tags:
        - AccountSend
      summary: Account - Send - New Followers Notification Email
      description: |-
        This endpoint, named "Account - Send - New Followers Notification Email", is designed to automatically send an email notification when a user has new followers on their account. It utilizes the `POST` method and interacts with a specific `API` at "http://localhost:3000/api/account/send/newFollowers".

        Starting with `auth` block, it employs `bearer token` authentication which denotes that to achieve successful communication with this API, you'll need to include the relevant access token string under the `bearer` field in the `auth` section. The placeholder for this token is represented as "BearerToken".

        The `request` section also defines a `client-UUID` header where a universally unique client identifier must be substituted in place of "ClientUUID". This identifier is used to uniquely identify each client that uses this endpoint.

        And finally, the `body` section of the request takes three key parts which are `sessionId`, `accountId`, and `newFollowers` in JSON format. The `sessionId` and `accountId` refer to the unique identifiers for a user's session and account respectively where you would replace "sessionId" and "accountId" with actual values. For the `newFollowers`, it takes an array of strings replacing "John Smith","Andy Lee","Michael Jordan" with the actual names of new followers.

        Remember that all the data provided in `request` section should adhere to the right string format as stipulated for each item. Keep your `token`, `ClientUUID`, `sessionId` and `accountId` confidential in order to uphold the security of your data.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"newFollowers\":[\"John Smith\",\"Andy Lee\",\"Michael Jordan\"]}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/send/streamerNewComment:
    post:
      tags:
        - AccountSend
      summary: Account - Send - Streamer New Comment Notification Email
      description: |-
        This API endpoint is named "Account - Send - Streamer New Comment Notification Email". The endpoint is designed to send a notification email to a user (presumably a streamer), whenever a new comment is made on their content.

        Authentication: This endpoint requires an authentication method of type 'Bearer'. The 'BearerToken' needs to be passed as the value for the 'token' key in the authentication section of the request.

        HTTP Request Method: The request method used for this endpoint is POST.

        URL: The endpoint resides at the URL "http://localhost:3000/api/account/send/streamerNewComment". 

        Headers: The request requires a header field of 'Client-UUID', it is used to identify the client making the request. The value for the 'Client-UUID' field in the headers section is 'ClientUUID'.

        Body: The body of the request should be in 'raw' format. There are four data fields to be included in the body of the request.

        - "sessionId": This refers to the unique identifier for the streaming session. Replace 'sessionId' with the valid session ID.
        - "accountId": It represents the unique identifier for the user's account. Replace 'accountId' with the valid account ID.
        - "commenterId": The unique identifier for the person who made the comment. The placeholder value here is a UUID, and should be replaced with the ID of the commenter.
        - "comment": The content of the comment made by the commenter. It is filled with placeholder text 'HELLO WORLD!'
          
        Please ensure to replace these placeholder values with actual data during implementation.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"commenterId\":\"12345AD3DS-ASDFSA2-ASDFASD-2ASDFASD\",\"comment\":\"HELLO WORLD!\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/send/streamerTeamDraftRequest:
    post:
      tags:
        - AccountSend
      summary: Account - Send - Streamer Team Draft Request Email
      description: |-
        This endpoint is named "Account - Send - Streamer Team Draft Request Email". It is designed to send a team draft request email through the streamer account. Here's a detailed description of all components of the endpoint:

        1. Auth: This endpoint uses bearer token authentication, which means that the server and client could pass a `token` as the value of the bearer token to authenticate each other. The type of the `token` is string.

        2. Request Method: The HTTP method used by this endpoint is `POST`, which means it submits data to be processed to a specified resource.

        3. URL: This HTTP request is sent to the URL: `http://localhost:3000/api/account/send/streamerTeamDraftRequest`.

        4. Headers: This HTTP request contains headers, which allow the client to pass additional information about the request or about itself, to the server. The `Client-UUID` is sent as a header with the type set to `default`. Replace `ClientUUID` with the unique identifier of the client.

        5. Body: The body of this request contains the data to be sent to the server. The data is sent in `raw` mode which contains the following parameters:
          
            - `sessionId`: A unique identifier for the session.
          
            - `accountId`: The account identifier of the user.
          
            - `ownerId`: The unique identifier of the owner. The value `KALSDF98-OJOASDF9=OASKDHFL-OIUAHSD89=ASDFDSS` is just a placeholder and needs to be replaced with the actual ownerId.

        Make sure to replace the placeholder data with actual values when making the request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"ownerId\":\"KALSDF98-OJOASDF9=OASKDHFL-OIUAHSD89=ASDFDSS\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/send/userNewComment:
    post:
      tags:
        - AccountSend
      summary: Account - Send - User New Comment Request Email
      description: |-
        This endpoint is named "Account - Send - User New Comment Request Email". It is designed to send an email notification to a user when a new comment is made on their account.

        Here is a breakdown of the data:

        - `auth`: This specifies the authorization method that is being used. In this case, the type is "bearer". The bearer key-value pair should be supplied, having a value of type string. 

        - `method`: This specifies the HTTP method that should be used for the request. In this case, the POST method is used, indicating that data will be sent to the server.

        - `url`: This is the URL that the request will be sent to. The path `http://localhost:3000/api/account/send/userNewComment` is the designated route for sending user new comment request emails.

        - `headers`: This is an array of objects that represents the headers that should be included in the HTTP request. The Client-UUID key, which carries a value of type default is required, you need to substitute "ClientUUID" with the appropriate value.

        - `body`: This describes the data that is being sent in the request. The body content is in raw format. The raw string contains a JSON object with four properties:
          
          - `sessionId`: A string that uniquely identifies the current session.

          - `accountId`: A string that uniquely identifies the account that the comment is being made on. 

          - `commenterId`: A unique identifier for the user who has made the comment. The example provided is a placeholder and should be replaced with the actual value.

          - `comment`: A string representing the content of the user's comment. The example "HELLO WORLD!" is a placeholder for actual comment.

        Do replace the placeholder values with actual values before making the request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"commenterId\":\"12345AD3DS-ASDFSA2-ASDFASD-2ASDFASD\",\"comment\":\"HELLO WORLD!\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/send/userTeamDraftRequest:
    post:
      tags:
        - AccountSend
      summary: Account - Send - Users Team Draft Request Email
      description: |-
        This endpoint is named 'Account - Send - Users Team Draft Request Email'. Its purpose is to facilitate a POST request to send a draft request email to the user's team in your account.

        1. Authentication:
           This endpoint is protected by 'bearer' authentication type. The bearer token is passed to authenticate requests made to the endpoint. The 'token' key holds the value of the bearer token in string format.

        2. HTTP Method: 
           This endpoint uses the 'POST' HTTP method. A POST method is used when you want to send some data to the server, for example, file update, form data, etc.

        3. URL: 
           The URL to which the request is to be sent is 'http://localhost:3000/api/account/send/userTeamDraftRequest'. This URL may change depending on the running environment of your application.

        4. Headers: 
           The 'Client-UUID' is the only header key in this endpoint. The value for this key should be your client's unique identifier. It must be sent in the request headers to the server for identification purposes.

        5. Body:
           The body of the request is in 'raw' format. It consists of:
           - 'sessionId', which should hold the unique session identifier.
           - 'accountId', that should include the unique id of the user's account.
           - 'streamerId', a unique identifier to identify individual streamers. 

        Please replace 'BearerToken', 'ClientUUID', 'sessionId', 'accountId', and 'streamerId' with their actual values when using this API endpoint. 

        Remember to adhere to the correct data types (e.g., strings) for each of these fields to avoid unexpected errors.

        This endpoint will handle the logic behind the sending of the draft request email to all members of your user's team.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"streamerId\":\"12345AD3DS-ASDFSA2-ASDFASD-2ASDFASD\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/settings/create:
    post:
      tags:
        - AccountSettings
      summary: Account - Settings - Create
      description: |
        The given endpoint information has the following data:

        1. `name`: "Account - Settings - Create". This indicates the purpose or function of the endpoint. It is used to create settings for an account.

        2. `request`: A container for the various details of the API request.

            a. `auth`: The authentication method used for the endpoint is a bearer token, defined as a JSON object. This object contains a `key` "token", indicating the reference name for the token. Its corresponding `value` is "BearerToken". Its `type` is "string", signifying the data format.

            b. `method`: "POST". This represents the HTTP method to be used when making a request to the endpoint. Since it's a POST request, it means this endpoint is used to send data to the server to create a new resource.

            c. `url`: "http://localhost:3000/api/account/settings/create". This is the URL of the server where the request will be made. It indicates where the API service is hosted.

            d. `headers`: An array for storing header data. In this instance, it doesn't contain any active data as shown by `disabled` set to `true`, it's typically used to define the metadata of the HTTP request.

            e. `body`: This is used to specify the data to be sent to the server. Its `mode` is "raw", meaning that data are sent in an unprocessed form. The `raw` property contains the actual data to be sent to the server as a JSON object. Here, it's sending "accountId" and "sessionId" as key-value pairs.

        Please note that actual values for "accountId" and "sessionId" in the `body` and "BearerToken" in the `auth` must be replaced by the user with actual valid tokens to successfully use this endpoint.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"accountId\":\"accountId\",\"sessionId\":\"sessionId\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/settings/update:
    put:
      tags:
        - AccountSettings
      summary: Account - Settings - Update - Payments
      description: |-
        This endpoint is named "Account - Settings - Update - Payments" and it is used to update an account's payment settings. It uses the HTTP PUT method.

        The 'auth' field includes the authentication type, which is 'bearer' and takes a 'token' whose value is 'BearerToken'. This is a string type.

        The 'request' field refers to the actual request made to the endpoint. The 'url' field in the 'request' object is the endpoint to which the request is being made, in this case, it is "http://localhost:3000/api/account/settings/update".

        In the 'headers' section, there is a Client-UUID. This holds unique identification for each client.

        The 'body' section contains the details of the user's account settings that are to be updated. It includes important details like session id, account id, settings key, personal information like name, email id, phone no., address, business-related details like company name, tax ID number, business type and structure, bank details like name, account number, email id, routing number. It also includes various other payment source details related to PayPal, Cash App, Venmo, Zelle, BitPay, etc along with their respective auth tokens. A minimum payout amount is also mentioned along with the frequency of occurrence of the payout (monthly in this case) and the preferred payout method. The start date for payout is provided at the end.

        All of these details will be sent as raw data in JSON format in the HTTP body.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\": \"sessionId\",\"accountId\": \"accountId\",\"settingKey\": \"payments\",\"firstName\": \"John\",\"lastName\": \"Doe\",\"birthday\": \"1990-01-01\",\"email\": \"john.doe@example.com\",\"phoneNumber\": \"+1234567890\",\"addressLine1\": \"123 Main St\",\"addressLine2\": \"Apt 456\",\"city\": \"Anytown\",\"state\": \"CA\",\"country\": \"US\",\"zipCode\": \"12345\",\"companyName\": \"ABC Inc\",\"taxIdNumber\": \"123-45-6789\",\"businessType\": \"LLC\",\"businessStructure\": \"Corporation\",\"bankFirstName\": \"John\",\"bankEmailAddress\": \"john.bank@example.com\",\"bankLastName\": \"Doe\",\"bankPhoneNumber\": \"+1234567890\",\"bankName\": \"Bank of Example\",\"bankAccountNumber\": \"123456789\",\"bankRoutingNumber\": \"987654321\",\"paypalSource\": \"john.paypal@example.com\",\"paypalAuthToken\": \"paypal-auth-token\",\"cashAppSource\": \"john.cashapp\",\"cashAppAuthToken\": \"cashapp-auth-token\",\"venmoSource\": \"john.venmo\",\"venmoAuthToken\": \"venmo-auth-token\",\"zelleSource\": \"john.zelle@example.com\",\"zelleAuthToken\": \"zelle-auth-token\",\"bitPaySource\": \"john.bitpay\",\"bitPayAuthToken\": \"bitpay-auth-token\",\"payoutMinimumAmount\": 50.00,\"payoutOccurrence\": \"monthly\",\"payoutPreferredMethod\": \"bank\",\"payoutStartDate\": \"2023-01-01\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/settings/get:
    get:
      tags:
        - AccountSettings
      summary: Account - Settings - Get - Payments
      description: |-
        This endpoint titled "Account - Settings - Get - Payments" retrieves the payment settings of a particular account. Below is a description of each data field:

        - `"name"`: This is the name of the endpoint. It indicates that this endpoint is related to "Account Settings", specifically "Payments", and it uses the GET method.

        - `"request"`: The object that provides details about the HTTP request made to the endpoint.

        - `"auth"`: It is the authentication component for securing the endpoint. This API uses bearer token authentication, specified by "bearer" type. 

           - `"type"`: The type of authentication used, which is bearer authentication.

           - `"bearer"`: This array carries an object that stores the bearer token for the endpoint. 

             - `"key"`: The key is 'token' which is a part of the bearer authentication scheme.

             - `"value"`: The actual value of the bearer token (BearerToken) that would be used in production environment is placed here.

             - `"type"`: The type signifies that the bearer token is represented as a string value.


        - `"method"`: This refers to the HTTP method used to make a request to the endpoint. In this case, it is the 'GET' method.

        - `"url"`: This is the URL of the API endpoint. It specifies API root(i.e., http://localhost:3000/api/), the path to the endpoint(i.e., account/settings/get/), and query parameters(settingKey, sessionId, accountId).

        - `"headers"`: This array object would include any additional headers needed for the request, but in this case, it is either left empty or not required for this request, which is indicated by the "disabled": true attribute.

        - `"body"`: This section holds the data that is sent to the API in the body of the request. 

           - `"mode"`: The mode denotes that the body of the request is to be sent in as 'raw' to the endpoint.

           - `"raw"`: The raw field means raw data can be inserted but in the provided data it is left empty, indicating that the GET request does not require additional body data.
           
        Overall, this endpoint retrieves the payment settings linked to the given sessionId and accountId. Please remember this endpoint needs a bearer token for the authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: settingKey
          in: query
          schema:
            type: string
          example: payments
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/settings/all:
    get:
      tags:
        - AccountSettings
      summary: Account - Settings - Get All - With Deleted
      description: |-
        The endpoint "Account - Settings - Get All - With Deleted" is a GET request that is used to fetch all account settings, even those attached to deleted accounts.

        1. "name": This is the name of the endpoint - Account - Settings - Get All - With Deleted

        2. "request": It contains everything about the request.

        3. "auth": This is the authorization required for this endpoint. Here, authentication needs to be a Bearer type which essentially means you need to send a bearer token to access this endpoint.
            - "type": The type of the authentication required which is 'bearer'
            - "bearer": Contains the key-value pair which would be sent in the header for authentication.
                - "key": The key which is 'token'.
                - "value": It's 'BearerToken'. This will be the actual token required for accessing the endpoint.
                - "type": The type of the value here, borne by the key which is 'string'. 

        4. "method": It is the HTTP verb and here it is 'GET'. This type of request is used to retrieve data from a server.

        5. "url": This is the link to the specific endpoint where the request is sent. The url here is 'http://localhost:3000/api/account/settings/all/?sessionId=sessionId&accountId=accountId&includeDeleted=true'. It contains query parameters such as sessionId, accountId and includeDeleted which might be required to get the appropriate response.

        6. "headers": These are used to provide the server with additional information. This endpoint does not require any additional headers, and the default header is disabled.

        7. "body": The body holds the data to be sent for a POST or PUT request. This is not used in a GET request as in this case, so 'mode' is 'raw', and 'raw' is blank as data is not sent in the body.
      security:
        - bearerAuth: []
      parameters:
        - name: sessionId
          in: query
          schema:
            type: string
          example: sessionId
        - name: accountId
          in: query
          schema:
            type: string
          example: accountId
        - name: includeDeleted
          in: query
          schema:
            type: boolean
          example: 'true'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/settings/delete:
    post:
      tags:
        - AccountSettings
      summary: Account - Settings - Delete - Payments
      description: |-
        The provided data is an endpoint for an API that acts as a back-end functionality for your application.

        Here's a detailed breakdown of each data instance:

        1. "name": Account - Settings - Delete - Payments - This is the name assigned to this API endpoint. It hints that it is used to delete payment settings.

        2. "request": Houses information about the HTTP request.

        3. "auth": The authentication method used to validate the given request. A bearer token authorization method is used.

        4. "bearer": The bearer object that carries the necessary authentication details.

        5. "key": The key here is named 'token'. It is the placeholder for the actual token.

        6. "value": Value is the corresponding value for the key (here, 'token'). This field expects a unique 'sessionId' (value) corresponding to the bearer token's name.

        7. "type": It represents the data type. In this case, it is string.

        8. "method": The HTTP request method to be used. It uses the POST method, which is used to send data to a server to create a resource.

        9. "url": This field contains the URL where the request should be made. The server is currently running locally on port 3000.

        10. "headers": Contains the information passed in header part of the HTTP request. Currently, it's set to 'default' type and is disabled.

        11. "body": Contains the data to be sent in the body of the HTTP request. It is in raw format and must include a JSON object containing: 
             - "sessionId": The session Id for the account.
             - "accountId": The ID identifying the specific user account. 
             - "settingKey": Identified as 'payments'. It usually represents the specific settings that need to be affected.

        Please ensure all of the required information (sessionId, accountId, settingKey) is provided when using this endpoint for it to function correctly.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"sessionId\":\"sessionId\",\"accountId\":\"accountId\",\"settingKey\":\"payments\"}"'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/update/account:
    put:
      tags:
        - AccountUpdate
      summary: Account - Update - Account
      description: |-
        This endpoint is named "Account - Update - Account". It is used to update an existing account on the system. The HTTP request method used is PUT and the endpoint URL is 'http://localhost:3000/api/account/update/account'.

        - Authentication:
          The endpoint requires bearer token authentication. The token should be replaced with valid "BearerToken".

        - HTTP Headers:
          In the headers, you need to include a key named "Client-UUID", replacing "ClientUUID" with the actual UUID related to the client application.

        - Request Body:
          The request body should be of JSON format and contains the following fields:

            * "zipcode": The postal code associated with the user's address, replace "95126" with the actual value.
            * "instagram": The user's Instagram handle, replace "fortunevieyra_" with the user's actual Instagram handle.
            * "username": A unique username for the user. You should replace "fortunevieyra" with the user's actual username.
            * "firstName": The first name of the user. Replace "fortune" with the user's actual first name.
            * "lastName": The last name of the user. Replace "vieyra" with the user's actual last name.
            * "birthday": The date of birth of the user in the format "MM/DD/YYYY", replace "02/02/1988" with user's actual birthday.
            * "sessionId": The ID of the session. Replace "sessionId" with the correct session ID.
            * "accountId": Unique identifier for the user's account. Replace "accountId" with the actual account ID of the user.

        Please note, all values need to be sent as strings. So, always encapsulate them in quotes.

        In the "options" field of the request body, the "raw" language is set to JSON, indicating that the data should be sent in the JSON format.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                zipcode: '95126'
                instagram: fortunevieyra_
                username: fortunevieyra
                firstName: fortune
                lastName: vieyra
                birthday: 02/02/1988
                sessionId: sessionId
                accountId: accountId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/update/display:
    put:
      tags:
        - AccountUpdate
      summary: Account - Update - Display
      description: |-
        This endpoint, named "Account - Update - Display", is designed to update a user's account display settings in your system.

        Starting with the "auth" key, it uses the authentication method "bearer". This requires a token, which is labelled under the "key" as "token". The value for this is "BearerToken". This authentication method verifies that the requests being sent to your API are from a trusted source.

        The "request" key defines the HTTP method to be a "PUT", signifying this endpoint is used to update existing resources or create them if they don't exist.

        The "url" key specifies the URL of the API endpoint, to which requests need to be sent. The link is "http://localhost:3000/api/account/update/display".

        The "headers" key contains a "Client-UUID" which serves as an identifier for the client making the API request. Its value is "ClientUUID".

        The "body" key is where you specify the details to be sent to the server. The "mode" is "raw", meaning that the data is sent in a raw, unprocessed format.

        The "body" also contains the "raw" key, which carries a JSON string. It includes parameters:
        - "displayPreference": This specifies the desired display setting; in this example, it is set to "dark".
        - "sessionId": This is a unique identifier for the user's current session; in this example, it is labeled as "sessionId".
        - "accountId": This is a unique identifier for the user's account; in this example, it is labeled as "accountId".

        These are provided as raw JSON input when making the PUT request. When using this endpoint to update an account's display settings, replace these things with actual values.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"displayPreference\":\"dark\",\"sessionId\":\"sessionId\",\"accountId\":\"accountId\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/update/email:
    put:
      tags:
        - AccountUpdate
      summary: Account - Update - Email
      description: |-
        This endpoint is named "Account - Update - Email". This specifies its purpose: It's a component in an API that facilitates email updates in an account. 

        - The `request` field contains the defining features of the endpoint's request parameters. 

        - The `auth` form of this endpoint is "bearer". This signifies that it uses bearer tokens for authorization. The token's details are stored in a subfield where "key" is "token", the "value" is "BearerToken" and the token type is set to "string".

        - The `method` details the type of HTTP request that should be made. In this case, it's a `PUT` request indicating that it's used to update current resource.

        - The `url` field provides the exact location at which the request should be pointed. Here, it's targeted at the "http://localhost:3000/api/account/update/email" endpoint. 

        - Inside the `headers` is a single object that indicates "Client-UUID" as a "key" with a "value" of "ClientUUID". The type of this header is "default". This header might be used to specify the unique identifier of the client making the request.

        - The `body` of the request includes three parameters packed into a raw JSON payload. The `mode` is set to "raw" indicating the form in which the body data is sent.

          - The `newEmail` field is likely expected to receive the updated email address. For example, "fortunevieyra@icloud.com" has been used in the placeholder.

          - `sessionId` is likely a unique identifier for the session during which the request is made. 

          - The `accountId` is probably the unique identifier of the account for which the email is to be updated. 

        Each of these fields and their particular values work together to form the complete functionality of this endpoint. Be sure to replace placeholders with actual data before use.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"newEmail\":\"fortunevieyra@icloud.com\",\"sessionId\":\"sessionId\",\"accountId\":\"accountId\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/update/language:
    put:
      tags:
        - AccountUpdate
      summary: Account - Update - Language
      description: |-
        **Endpoint Name:** Account - Update - Language

        This endpoint is used to update the language preference of an account. Below is a comprehensive analysis of the data fields involved:

        **Request Authentication:**

        * `auth`: Describes the authentication method. Specifically, the type is bearer type authentication. 

        * `bearer` Array: This holds the access token information. 
            * `key`: Refers to the identifier of the token. By default, it is "token".
            * `value`: This is the actual token value used for authorization. Placeholder here is "BearerToken".
            * `type`: This is the data type of the token, and the default is set as "string".

        **Request Method:**

        * `method`: The HTTP method used for the API call. This endpoint uses the "PUT" method, implying that it is intended for updating an existing resource.

        **Request URL:**

        * `url`: The URL of the API endpoint. For this request, it is "http://localhost:3000/api/account/update/language".

        **Request Headers:**

        * `headers`: This includes extra information sent with the request. Here, a "Client-UUID" is sent, which uniquely identifies every client.

        **Request Body:**

        * `body`: This is the main content of the request. In this case, it's in raw JSON format.
            * `mode`: Specifies that the request body is raw.
            * `raw`: This includes the essential details viz., language preference ('languagePreference'), a unique session identifier ('sessionId'), and the account identifier ('accountId') of the account for which the language preference needs to be updated. The language preference here is set to Spanish ('es'). 

        This endpoint, thus, takes an Authorization token, client UUID, session ID, account ID, and the preferred language to update the language preference of the specific account.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"languagePreference\":\"es\",\"sessionId\":\"sessionId\",\"accountId\":\"accountId\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/update/phone:
    put:
      tags:
        - AccountUpdate
      summary: Account - Update - Phone
      description: |-
        1. "name": This represents the name of the endpoint. In this case, the name "Account - Update - Phone" is indicative of an endpoint that handles updates to a phone number in an account.

        2. "request": This object contains details about the request to be made to the API.

        3. "auth": This object describes the authorization method required to access the endpoint. It includes:
           - "type": The type of authorization used, which here is "bearer", indicating the Bearer Token Authorization method.
           - "bearer": This array contains an object with three keys:
             - "key": The key which represents the name of the authorization token, here it's "token".
             - "value": The value of the token which is "BearerToken".
             - "type": Represents the data type of the token, which is "string".

        4. "method": This is the HTTP method used to call the endpoint. For this endpoint, the method is "PUT", indicating that we're executing an update operation.

        5. "url": The URL of the endpoint. In this case, it's "http://localhost:3000/api/account/update/phone".

        6. "headers": The headers to include in the HTTP request. Here, there's a single header with:
           - "key": The key or name of the header field, here it's "Client-UUID".
           - "value": The value of this header field, which is "ClientUUID".
           - "type": The type of the header field, here it's "default".

        7. "body": The body of the request. This object has two fields:
           - "mode": The type or format of the body data, which is "raw" in this case, meaning that the data is sent in a raw block of text.
           - "raw": The actual content to send with the request. This field contains a JSON string with the new phone number ("newPhone"), the session ID ("sessionId"), and account ID ("accountId"). Please note that values shown here are placeholders, replace them with actual values while using the API.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"newPhone\":\"4084599441\",\"sessionId\":\"sessionId\",\"accountId\":\"accountId\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/update/type:
    put:
      tags:
        - AccountUpdate
      summary: Account - Update - Type
      description: |-
        This endpoint represents an operation to update the 'type' of an account in a system. It is named "Account - Update - Type". The operation uses the 'PUT' method, implying it is for updating a resource on the server. 

        Here's a breakdown of all the data:

        1. `name`: This is the identifier of the endpoint. In this context, it represents the name of the operation which is "Account - Update - Type". 

        2. `request`: This contains all the details of the request that needs to be made to the server.

        3. `auth`: This holds the authentication method and credentials required to gain access to the endpoint. The type of authorization here is "bearer". It requires a "token" for authorization which is a "BearerToken" here.

        4. `method`: This specifies the HTTP method for the request. In this case, it's "PUT", which means it’s used to update an existing resource.

        5. `url`: This is the URL of the server where the request will be made. 'http://localhost:3000/api/account/update/type' is the URL in this case.

        6. `headers`: These are used to send additional information to the server. In this case, there is one key-value pair as header input. The 'key' is the 'Client-UUID', and its 'value' is the 'ClientUUID'.

        7. `body`: This holds the actual data that needs to be sent to the server. Body type is 'raw', implying the data is sent in plain text. An object is being sent here with the following fields:
           - `accountType`: It signifies the type of the account. In this case, it's "Business".
           - `sessionId`: This is a unique identifier for a session. It's current value is "sessionId".
           - `accountId`: It stands for the unique identifier of the account. It's current value is "accountId".
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"accountType\":\"Business\",\"sessionId\":\"sessionId\",\"accountId\":\"accountId\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/update/username:
    put:
      tags:
        - AccountUpdate
      summary: Account - Update - Username
      description: |-
        This endpoint is named "Account - Update - Username" and it is used to update the username of an account.

        It uses the "PUT" method of request which means it's designed to update or replace existing data.

        The URL for this endpoint is "http://localhost:3000/api/account/update/username". You can replace the "localhost:3000" part with the actual server address where your API is hosted. 

        Authorization of the request is managed using a "bearer" token which needs to be provided in the "auth" field. The key for this is "token" and the value should be the actual "BearerToken", which is a unique token assigned for each user.

        There is a header field which expects a "Client-UUID", this is essentially the unique identifier for each client. The client is expected to send their UUID every time they make a request to this endpoint.

        The request body is sent in "raw" mode. The payload contains the new "username" that needs to be updated. It also contains a "sessionId" which represents the session of the user. The "accountId" is the unique identifier of the account that you wish to update the username of.

        In summary, to use this endpoint effectively, you need to include the bearer token, the client UUID, and an appropriate payload in the request. If all these details are accurate, the username of the specified account will be updated successfully.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"username\":\"fortunevieyra\",\"sessionId\":\"sessionId\",\"accountId\":\"accountId\"}"'
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/update/password:
    put:
      tags:
        - AccountUpdate
      summary: Account - Update - Password
      description: |-
        "name": This specifies the name of the endpoint. Here, it is "Account - Update - Password" implying this API endpoint is used for updating password in the account section.

        "request": This indicates the type of request to be made to the server, and contains all the required parameters needed to make the request.

        "auth": It signifies the authentication method to be used. The type here is "bearer", which is a HTTP authentication scheme that involves security tokens called bearer tokens.

        "bearer": It is an array of bearer authentication factors. Here, we have a key-value pair specifying the bearer token.

        "key": This is the parameter name. For bearer array, the key is 'token'.

        "value": This is the actual value of the parameter. For bearer array, the value is 'BearerToken', which should be replaced by your actual bearer token.

        "type": It describes the data type of the parameter. Here, it is 'string', which means the bearer token is a string.

        "method": This indicates the HTTP method to be used when making the request to the API. In this endpoint, it is 'PUT' which is typically used to update resources.

        "url": This is the API endpoint where the request will be sent. For this endpoint, the URL is http://localhost:3000/api/account/update/password.

        "headers": This is a list of all the HTTP headers to be included in the request. In this request, there is one header parameter.

        "key": For the header, the key is 'Client-UUID'.

        "value": For the header, the value should be your ClientUUID.

        "type": This value describes the type for the header field. Here, it is 'default'.

        "body": This is the data to be sent to the server. In this request, it contains JSON raw data and its options.

        "mode": This specifies how the body data is sent. Here 'raw' mode means the data is sent exactly as it is. 

        "raw": This is the actual data to be sent in JSON format. It consists of 'password' (values should be your new password), 'sessionId' (values should be your session id), and 'accountId' (values should be your account id).

        "options": This field defines options for raw data. Here, it specifies that the language used is JSON.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                password: '111111'
                sessionId: sessionId
                accountId: accountId
      security:
        - bearerAuth: []
      parameters:
        - name: Client-UUID
          in: header
          schema:
            type: string
          example: ClientUUID
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/verify/account:
    post:
      tags:
        - AccountVerify
      summary: Account - Verify - Account
      description: |-
        This endpoint is named "Account - Verify - Account". It is designed to verify an account using the POST method. 

        1. `name`: The name is "Account - Verify - Account". This illustrates the purpose of the endpoint, which is to verify an account.
         
        2. `request`: This object contains all the information about the HTTP request.

        3. `method`: The method indicates the type of HTTP request method used for the API request. In this case, the method is "POST", which signifies that this request will submit data to the server to be processed.

        4. `url`: This specifies the URL for the endpoint. The URL is "http://localhost:3000/api/account/verify/account". This is the address that we will send our POST request to.

        5. `headers`: This currently contains no values; headers are used to pass additional information with the request or the response. They define the operating parameters of an HTTP request or response.

        6. `body`: This object contains the information that will be sent to the server. It contains another object with the `mode` and `raw` properties.

        7. `mode`: The mode is "raw". This refers to the raw body content of the HTTP request. The "raw" mode here means that we are sending a raw request body, which is not formatted in any specific way.

        8. `raw`: This is the raw request body. It's in the form of a JSON object. It contains three properties: "unlockCode", "sessionId", and "accountId".
           - `unlockCode`: This is the unlock code used for account verification.
           - `sessionId`: This refers to the unique identifier of a user session.
           - `accountId`: This refers to the unique identifier of the account to be verified.
           
        This endpoint should be used when you want to verify an account by sending a POST request to the server. The request will contain the user's unlock code, session ID and account ID as parameters.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"unlockCode\":\"unlockCode\",\"sessionId\":\"sessionId\",\"accountId\":\"accountId\"}"'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/verify/email:
    post:
      tags:
        - AccountVerify
      summary: Account - Verify - Email Address
      description: |-
        This endpoint is named "Account - Verify - Email Address". It is designed to verify an email address linked to an account. 

        It uses the `POST` method, which allows it to send data to the server to create a new entry in the database. The `POST` method is often used when submitting filled forms.

        The URL for this endpoint is `"http://localhost:3000/api/account/verify/email"`. This endpoint lies within your local server running on port 3000. Its path is `/api/account/verify/email`, whereby it's within the 'api', 'account', 'verify', then finally, 'email' subdirectory.

        Currently, it does not contain any custom `headers`. Headers are often used to provide information about the request body and the response, such as its MIME type, or to provide authentication information. If necessary, headers could be added accordingly.

        The `body` of the request is being sent in `raw` mode. Raw mode is used when you want to send information without any encoding. This is useful when you want to send JSON or XML data to the server.

        The raw data being sent consists of two key-value pairs:

        - `verificationToken`: The token used to verify the email. This would typically be a unique string that the server generates and sends to the email address for verification.
        - `email`: The email address to be verified. This must match the email address that the server has on record for the associated verification token.

        In normal usage, both `verificationToken` and `email` would need to be replaced with actual data.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"verificationToken\":\"verificationToken\",\"email\":\"email\"}"'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/verify/phone:
    post:
      tags:
        - AccountVerify
      summary: Account - Verify - Phone Number
      description: |-
        This endpoint is for the `Account - Verify - Phone Number` API.

        **Method**: POST
        The HTTP method used for this endpoint is a POST request. It's typically used to send data to a server to create a new resource.

        **URL**: `http://localhost:3000/api/account/verify/phone`
        This is the URL at which the API needs to be hit. Since we're in a local development environment, we're using `localhost`. The port we're using to access the local server is `3000`. The path of the API is `/api/account/verify/phone`, which is used to verify an account's phone number.

        **Headers**: []
        This field is empty, meaning we're not sending any additional metadata in the header of this HTTP request. Headers often include items like authorization tokens, content type etc. However, none of that is required by this endpoint.

        **Body**:
        The body of the HTTP request is sent in a `raw` format. This is the data that the API takes as input in order to verify a phone number.

        - `verificationCode`: This is the code that is used to verify a phone number. Typically, it's sent by an SMS to the phone number that needs to be verified. 

        - `phone`: This is the phone number that needs to be verified. It needs to be provided so the API knows which phone number it's supposed to verify.

        This endpoint requires both `verificationCode` and `phone` to be present in the raw JSON body of the HTTP request in order to work correctly.

        Example of the request body would be:
        ```
        {
          "verificationCode": "123456",
          "phone": "+1234567890"
        }
        ```

        Make sure to replace the values with the actual verification code received and the phone number to be verified.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"verificationCode\":\"verificationCode\",\"phone\":\"phone\"}"'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/verify/unlock:
    post:
      tags:
        - AccountVerify
      summary: Account - Verify - Security Code
      description: |-
        This endpoint is labeled as "Account - Verify - Security Code" and it represents an API operation for verifying a security code for a specific user account.

        1. Method: POST
           This endpoint uses the HTTP POST method, which is typically used to send (or create) data to the server.

        2. URL: `http://localhost:3000/api/account/verify/unlock`
           This is the endpoint's URL. The base URL is `http://localhost:3000`, which denotes your local server when the application is run locally. The path `/api/account/verify/unlock` is the specific route in your application where the data will be sent to be processed.

        3. Headers: []  
           The headers field is currently empty. This is where you'd usually provide additional information, like content type or authentication tokens.

        4. Body: 
             In body, we have the following fields:
           
           - `mode`: `raw`  
             The mode property specifies how the request data is being sent. The value `raw` means the data is being sent as a string in the body of the request.

           - `raw`:  
             This is the actual data payload in string format that's being sent in the request.
           
             It contains three fields:

             - `accountId`: The unique identifier of the account. This is a placeholder and should be replaced with actual account Id during the API request.
          
             - `sessionId`: Represents a session identifier, typically used for tracking or authenticating user sessions. Replace this placeholder with an actual session Id.
            
             - `unlockCode`: This is the security code that needs to be verified for the account. Replace the placeholder with the actual unlock code.

        This endpoint is used to verify a security code (unlockCode) pertaining to a user's session (sessionId) for a specific account (accountId). The payload should be formed by replacing the placeholders with real data and sent as a raw JSON string.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"accountId\":\"accountId\",\"sessionId\":\"sessionId\",\"unlockCode\":\"unlockCode\"}"'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/verify/link:
    post:
      tags:
        - AccountVerify
      summary: Account - Verify - Verification Link
      description: |-
        The endpoint is named "Account - Verify - Verification Link". It is used to validate a user account through a verification link. This endpoint uses the POST method, which is mainly for sending data.

        Endpoint URL: This is the URL where the request is sent. In this case, the URL is http://localhost:3000/api/account/verify/link. 

        The endpoint does not require any specific headers. Headers are often used to provide additional information that the server needs to process the request.

        Body of the request: Here, the body is provided in raw format and contains two data fields that you need to fill:

        1. verificationToken: This is the token that is unique to each user and is used to verify the user's identity.
         
        2. email: This is the email address of the user who is trying to verify their account. 

        Remember to replace "verificationToken" and "email" with the actual values before sending the request.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"verificationToken\":\"verificationToken\",\"email\":\"email\"}"'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/verify/code:
    post:
      tags:
        - AccountVerify
      summary: Account - Verify - Unlock Code
      description: |-
        This endpoint is labeled as `Account - Verify - Unlock Code`. The purpose of this endpoint is to verify and unlock a specific code for an account. 

        The method used for this API call is `POST`, indicating that this endpoint is used to send data to the server to create a resource.

        The URL or endpoint where the API call is made is `http://localhost:3000/api/account/verify/code`. This is the path in your API where resources related to verifying and unlocking the account code can be created.

        This endpoint does not use any predefined HTTP headers. Headers are often used to provide information about the request body or response, or about the server or client. Since there are no headers indicated here, the request doesn't carry any additional information in the headers.

        The `body` of the request consists of raw data sent to the server. It is in JSON format which is a standard data format with a diverse range of functionality. Two parameters are passed in this request body:

        1. `securityCode`: This is an alphanumeric code associated with the account that needs verification. This will be unique per individual account and must be supplied by the user.
          
        2. `email`: This is the email address associated with the user's account. It is used to identify the user's account that is being processed for the unlock code.

        Remember to replace `securityCode` and `email` placeholders with actual values when you are using this endpoint.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"securityCode\":\"securityCode\",\"email\":\"email\"}"'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/account/verify/username:
    post:
      tags:
        - AccountVerify
      summary: Account - Verify - Username
      description: |-
        The given endpoint is called "Account - Verify - Username". It is configured to make a POST request to the URL: http://localhost:3000/api/account/verify/username. 

        Here's a detailed description of each data it includes:

        1. "name": This is the title or name of the endpoint. You can think of this as a label to identify what the endpoint does. 

        2. "request": This is a complex object that includes all the information necessary for the request. It includes several child objects and data fields.

           a. "method": This denotes the HTTP method of the request. In this case, it's a POST request, which implies that this endpoint is used to send data to be processed to a specified resource.

           b. "url": This is the URL where the request will be made. Our requests get sent to "http://localhost:3000/api/account/verify/username". This is typically the location of the server that will process our request.

           c. "headers": This is an array that should include any HTTP headers we want to send with our request. However, in this case, it's empty, which means no additional headers are being sent with the request.

           d. "body": This contains the actual data that we're sending with our request. 

        3. "body": This is a complex object that includes the data we're sending and the format we're sending it in. 

           a. "mode": This describes the format of the data. The value "raw" tells us that the data in "raw" field is sent as is, and not in any specific format like form-data or x-www-form-urlencoded.

           b. "raw": This is the actual data we're sending for processing. In this case, we're sending a JSON object with three properties: 
              
               i. "username": The username of the account that needs verification.
              
              ii. "accountId": The ID related to the account that is currently being verified.
             
             iii. "sessionId": The session ID associated with the current user or current verification process.
          
        In a nutshell, this endpoint is used to verify a username for a given account ID and session ID in our system by making a POST request to the given URL.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '"{\"username\":\"fortunevieyra1\",\"accountId\":\"accountId\",\"sessionId\":\"sessionId\"}"'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
